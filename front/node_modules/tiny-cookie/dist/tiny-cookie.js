(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Cookie = {}));
})(this, (function (exports) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function hasOwn(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    // Escape special characters.
    function escapeRe(str) {
        return str.replace(/[.*+?^$|[\](){}\\-]/g, "\\$&");
    }
    // Return a future date by the given string.
    function computeExpires(str) {
        var lastCh = str.charAt(str.length - 1);
        var value = parseInt(str, 10);
        var expires = new Date();
        switch (lastCh) {
            case "Y":
                expires.setFullYear(expires.getFullYear() + value);
                break;
            case "M":
                expires.setMonth(expires.getMonth() + value);
                break;
            case "D":
                expires.setDate(expires.getDate() + value);
                break;
            case "h":
                expires.setHours(expires.getHours() + value);
                break;
            case "m":
                expires.setMinutes(expires.getMinutes() + value);
                break;
            case "s":
                expires.setSeconds(expires.getSeconds() + value);
                break;
            default:
                expires = new Date(str);
        }
        return expires;
    }
    // Convert an object to a cookie option string.
    function convert(opts) {
        var res = "";
        for (var _i = 0, _a = Object.keys(opts); _i < _a.length; _i++) {
            var key = _a[_i];
            if (/^expires$/i.test(key)) {
                var expires = opts[key];
                var expiresDate = void 0;
                if (typeof expires === "object") {
                    expiresDate = expires;
                }
                else {
                    expires += typeof expires === "number" ? "D" : "";
                    expiresDate = computeExpires(String(expires));
                }
                res += ";".concat(key, "=").concat(expiresDate.toUTCString());
            }
            else if (/^secure$/.test(key)) {
                if (opts[key]) {
                    res += ";".concat(key);
                }
            }
            else {
                res += ";".concat(key, "=").concat(opts[key]);
            }
        }
        if (!hasOwn(opts, "path")) {
            res += ";path=/";
        }
        return res;
    }

    // Check if the browser cookie is enabled.
    function isEnabled() {
        var key = "@key@";
        var value = "1";
        var re = new RegExp("(?:^|; )".concat(key, "=").concat(value, "(?:;|$)"));
        document.cookie = "".concat(key, "=").concat(value, ";path=/");
        var enabled = re.test(document.cookie);
        if (enabled) {
            // eslint-disable-next-line
            remove(key);
        }
        return enabled;
    }
    // Get the cookie value by key.
    function get(key, decoder) {
        if (decoder === void 0) { decoder = decodeURIComponent; }
        if (typeof key !== "string" || !key) {
            return null;
        }
        var reKey = new RegExp("(?:^|; )".concat(escapeRe(key), "(?:=([^;]*))?(?:;|$)"));
        var match = reKey.exec(document.cookie);
        if (match === null) {
            return null;
        }
        if (typeof decoder === "function") {
            return decoder(match[1]);
        }
        return match[1];
    }
    // The all cookies
    function getAll(decoder) {
        if (decoder === void 0) { decoder = decodeURIComponent; }
        var reKey = /(?:^|; )([^=]+?)(?:=([^;]*))?(?:;|$)/g;
        var cookies = {};
        var match;
        /* eslint-disable no-cond-assign */
        while ((match = reKey.exec(document.cookie))) {
            reKey.lastIndex = match.index + match.length - 1;
            cookies[match[1]] =
                typeof decoder === "function" ? decoder(match[2]) : match[2];
        }
        return cookies;
    }
    function set(key, value, encoder, options) {
        if (encoder === void 0) { encoder = encodeURIComponent; }
        if (typeof encoder === "object" && encoder !== null) {
            /* eslint-disable no-param-reassign */
            options = encoder;
            encoder = encodeURIComponent;
            /* eslint-enable no-param-reassign */
        }
        var attrsStr = convert(options || {});
        var valueStr = typeof encoder === "function" ? encoder(value) : value;
        var newCookie = "".concat(key, "=").concat(valueStr).concat(attrsStr);
        document.cookie = newCookie;
    }
    // Remove a cookie by the specified key.
    function remove(key, options) {
        var opts = { expires: -1 };
        if (options) {
            opts = __assign(__assign({}, options), opts);
        }
        return set(key, "a", opts);
    }
    // Get the cookie's value without decoding.
    function getRaw(key) {
        return get(key, null);
    }
    // Set a cookie without encoding the value.
    function setRaw(key, value, options) {
        return set(key, value, null, options);
    }

    exports.get = get;
    exports.getAll = getAll;
    exports.getAllCookies = getAll;
    exports.getCookie = get;
    exports.getRaw = getRaw;
    exports.getRawCookie = getRaw;
    exports.isCookieEnabled = isEnabled;
    exports.isEnabled = isEnabled;
    exports.remove = remove;
    exports.removeCookie = remove;
    exports.set = set;
    exports.setCookie = set;
    exports.setRaw = setRaw;
    exports.setRawCookie = setRaw;

}));
